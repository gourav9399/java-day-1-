11.
  public class MatrixMultiplication {
    public static void main(String[] args) {
        int[][] matrixA = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        int[][] matrixB = {
                {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1}
        };

        int[][] result = multiplyMatrices(matrixA, matrixB);

        System.out.println("Matrix A:");
        printMatrix(matrixA);
        System.out.println("Matrix B:");
        printMatrix(matrixB);
        System.out.println("Result:");
        printMatrix(result);
    }

    public static int[][] multiplyMatrices(int[][] matrixA, int[][] matrixB) {
        int rowsA = matrixA.length;
        int colsA = matrixA[0].length;
        int rowsB = matrixB.length;
        int colsB = matrixB[0].length;

        if (colsA != rowsB) {
            System.out.println("Matrices cannot be multiplied");
            return null;
        }

        int[][] result = new int[rowsA][colsB];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += matrixA[i][k] * matrixB[k][j];
                }
            }
        }

        return result;
    }

    public static void printMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}

12.
public class MatrixAddition {
    public static void main(String[] args) {
        int[][] matrixA = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        int[][] matrixB = {
                {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1}
        };

        int[][] result = addMatrices(matrixA, matrixB);

        System.out.println("Matrix A:");
        printMatrix(matrixA);
        System.out.println("Matrix B:");
        printMatrix(matrixB);
        System.out.println("Result:");
        printMatrix(result);
    }

    public static int[][] addMatrices(int[][] matrixA, int[][] matrixB) {
        int rowsA = matrixA.length;
        int colsA = matrixA[0].length;
        int rowsB = matrixB.length;
        int colsB = matrixB[0].length;

        if (rowsA!= rowsB || colsA!= colsB) {
            System.out.println("Matrices cannot be added");
            return null;
        }

        int[][] result = new int[rowsA][colsA];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsA; j++) {
                result[i][j] = matrixA[i][j] + matrixB[i][j];
            }
        }

        return result;
    }

    public static void printMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}
13.import java.util.ArrayList;
import java.util.List;

public class MergeSortedArrays {
    public static void main(String[] args) {
        
        int[] array1 = {1, 3, 5, 7};
        int[] array2 = {2, 4, 6, 8};

     
        List<Integer> mergedList = mergeSortedArrays(array1, array2);

      
        System.out.println("Merged Array List: " + mergedList);
    }

   
    public static List<Integer> mergeSortedArrays(int[] array1, int[] array2) {
        List<Integer> mergedList = new ArrayList<>();

        int i = 0, j = 0;

        
        while (i < array1.length && j < array2.length) {
            if (array1[i] <= array2[j]) {
                mergedList.add(array1[i]);
                i++;
            } else {
                mergedList.add(array2[j]);
                j++;
            }
        }


        while (i < array1.length) {
            mergedList.add(array1[i]);
            i++;
        }

      
        while (j < array2.length) {
            mergedList.add(array2[j]);
            j++;
        }

        return mergedList;
    }
}

14.import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MergeSortedArraysUsingArrayList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter the number of elements in the first sorted array: ");
        int n1 = scanner.nextInt();
        int[] array1 = new int[n1];
        System.out.println("Enter the elements of the first sorted array:");
        for (int i = 0; i < n1; i++) {
            array1[i] = scanner.nextInt();
        }

        
        System.out.print("Enter the number of elements in the second sorted array: ");
        int n2 = scanner.nextInt();
        int[] array2 = new int[n2];
        System.out.println("Enter the elements of the second sorted array:");
        for (int i = 0; i < n2; i++) {
            array2[i] = scanner.nextInt();
        }

     
        List<Integer> mergedList = mergeSortedArrays(array1, array2);

     
        System.out.println("Merged Array List: " + mergedList);

          scanner.close();
    }

    
    public static List<Integer> mergeSortedArrays(int[] array1, int[] array2) {
        List<Integer> mergedList = new ArrayList<>();
        int i = 0, j = 0;

     
        while (i < array1.length && j < array2.length) {
            if (array1[i] <= array2[j]) {
                mergedList.add(array1[i]);
                i++;
            } else {
                mergedList.add(array2[j]);
                j++;
            }
        }

  
        while (i < array1.length) {
            mergedList.add(array1[i]);
            i++;
        }
        while (j < array2.length) {
            mergedList.add(array2[j]);
            j++;
        }

        return mergedList;
    }
}

15.import java.util.Scanner;

public class CountCompositeNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

      
        System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();

       
        int[] array = new int[n];


       System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

    
        int compositeCount = countCompositeNumbers(array);

  
        System.out.println("Number of composite numbers in the array: " + compositeCount);

     
        scanner.close();
    }


    public static int countCompositeNumbers(int[] arr){
 int count = 0;

 
        for (int num : array) {
            if (num > 1 && isComposite(num)) {
                count++;
            }
        }

        return count;
    }


    public static boolean isComposite(int number) {
        if (number <= 1) {
            return false;
        }        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return true; // It is a composite number
            }
        }

        return false; // It is not a composite number
    }
}

16.import java.util.Scanner;

public class RightTriangleStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

    
        System.out.print("Enter the number of rows for the right triangle: ");
        int n = scanner.nextInt();

 
        printRightTriangleStarPattern(n);

     
        scanner.close();
    }

 
    public static void printRightTriangleStarPattern(int n) {
        for (int i = 1; i <= n; i++) {
          
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
         
            System.out.println();
        }
    }
}

17.import java.util.Scanner;

public class RightTriangleStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rows for the right triangle: ");
        int n = scanner.nextInt();

        printRightTriangleStarPattern(n);

        scanner.close();
    }

    public static void printRightTriangleStarPattern(int n) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

18.public static void printRectangleBorderAndFillPattern(String borderSymbol, String fillSymbol, int rows, int columns) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (i == 0 || i == rows - 1 || j == 0 || j == columns - 1) {
                System.out.print(borderSymbol + " ");
            } else {
                System.out.print(fillSymbol + " ");
            }
        }
        System.out.println();
    }
}

19.import java.util.Scanner;

public class DiamondStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rows for the diamond (must be odd): ");
        int n = scanner.nextInt();

        // Ensure the number of rows is odd
        if (n % 2 == 0) {
            System.out.println("Number of rows must be odd.");
            return;
        }

        printDiamondStarPattern(n);

        scanner.close();
    }

    public static void printDiamondStarPattern(int n) {
        int mid = n / 2;

        // Print the top half of the diamond
        for (int i = 0; i <= mid; i++) {
            for (int j = mid; j > i; j--) {
                System.out.print("  "); // Print spaces
            }
            for (int k = 0; k <= i; k++) {
                System.out.print("* ");
            }
            System.out.println();
        }

        // Print the bottom half of the diamond
        for (int i = mid - 1; i >= 0; i--) {
            for (int j = mid; j > i; j--) {
                System.out.print("  "); // Print spaces
            }
            for (int k = 0; k <= i; k++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

20.import java.util.Scanner;

public class RightTriangleStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rows for the right triangle: ");
        int n = scanner.nextInt();

        printRightTriangleStarPattern(n);

        scanner.close();
    }

    public static void printRightTriangleStarPattern(int n) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("% ");
            }
            System.out.println();
        }
    }
}
